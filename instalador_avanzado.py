#!/usr/bin/env python3
"""
Instalador Avanzado - Forest Edge PQR
Instalaci√≥n autom√°tica con configuraci√≥n inteligente para diferentes entornos
"""

import os
import sys
import subprocess
import platform
import socket
import json
import time
from datetime import datetime
import urllib.request
import ssl

class AdvancedInstaller:
    def __init__(self):
        self.os_type = platform.system().lower()
        self.python_version = sys.version_info
        self.errors = []
        self.warnings = []
        self.installed_packages = []
        
    def print_header(self):
        """Mostrar header del instalador"""
        print("="*60)
        print("üå≤ FOREST EDGE PQR - INSTALADOR AVANZADO")
        print("="*60)
        print(f"üñ•Ô∏è  Sistema Operativo: {platform.system()} {platform.release()}")
        print(f"üêç Python: {sys.version}")
        print(f"üìÅ Directorio: {os.getcwd()}")
        print(f"‚è∞ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*60)

    def check_requirements(self):
        """Verificar requisitos del sistema"""
        print("\nüîç VERIFICANDO REQUISITOS DEL SISTEMA...")
        
        # Verificar Python
        if self.python_version < (3, 8):
            self.errors.append(f"Python 3.8+ requerido. Actual: {self.python_version.major}.{self.python_version.minor}")
            return False
        print(f"‚úÖ Python {self.python_version.major}.{self.python_version.minor}.{self.python_version.micro}")
        
        # Verificar pip
        try:
            import pip
            print("‚úÖ pip disponible")
        except ImportError:
            self.errors.append("pip no est√° instalado")
            return False
        
        # Verificar conexi√≥n a internet
        if self.check_internet_connection():
            print("‚úÖ Conexi√≥n a internet disponible")
        else:
            self.warnings.append("Sin conexi√≥n a internet - instalaci√≥n offline")
        
        # Verificar espacio en disco
        free_space = self.get_free_space_mb()
        if free_space < 500:  # Menos de 500 MB
            self.warnings.append(f"Espacio en disco bajo: {free_space:.0f} MB")
        else:
            print(f"‚úÖ Espacio disponible: {free_space:.0f} MB")
        
        return len(self.errors) == 0

    def check_internet_connection(self):
        """Verificar conexi√≥n a internet"""
        try:
            # Crear contexto SSL que ignore certificados
            ctx = ssl.create_default_context()
            ctx.check_hostname = False
            ctx.verify_mode = ssl.CERT_NONE
            
            # Intentar conectar a PyPI
            urllib.request.urlopen('https://pypi.org', timeout=5, context=ctx)
            return True
        except:
            try:
                # Intentar con Google como fallback
                urllib.request.urlopen('https://google.com', timeout=5, context=ctx)
                return True
            except:
                return False

    def get_free_space_mb(self):
        """Obtener espacio libre en MB"""
        try:
            if self.os_type == 'windows':
                import shutil
                total, used, free = shutil.disk_usage('.')
                return free / (1024 * 1024)
            else:
                statvfs = os.statvfs('.')
                return statvfs.f_bavail * statvfs.f_frsize / (1024 * 1024)
        except:
            return 1000  # Asumir suficiente espacio si no se puede verificar

    def get_local_ip(self):
        """Obtener IP local del sistema"""
        try:
            # Conectar a una direcci√≥n externa para obtener IP local
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except:
            return "127.0.0.1"

    def detect_environment(self):
        """Detectar tipo de entorno"""
        print("\nüîç DETECTANDO ENTORNO DE INSTALACI√ìN...")
        
        env_type = "desarrollo"  # Por defecto
        
        # Detectar si es servidor
        if self.os_type == 'linux':
            # Verificar si hay interfaz gr√°fica
            if not os.environ.get('DISPLAY'):
                env_type = "servidor"
                print("üñ•Ô∏è  Entorno detectado: Servidor Linux (sin interfaz gr√°fica)")
            else:
                print("üñ•Ô∏è  Entorno detectado: Linux con interfaz gr√°fica")
        elif self.os_type == 'windows':
            print("üñ•Ô∏è  Entorno detectado: Windows")
        elif self.os_type == 'darwin':
            print("üñ•Ô∏è  Entorno detectado: macOS")
        
        # Detectar si es contenedor Docker
        if os.path.exists('/.dockerenv'):
            env_type = "docker"
            print("üê≥ Entorno Docker detectado")
        
        # Detectar si es entorno cloud
        cloud_indicators = [
            '/var/lib/cloud',  # Cloud-init
            '/sys/class/dmi/id/product_name'  # DMI info
        ]
        
        for indicator in cloud_indicators:
            if os.path.exists(indicator):
                env_type = "cloud"
                print("‚òÅÔ∏è  Entorno cloud detectado")
                break
        
        return env_type

    def setup_virtual_environment(self):
        """Configurar entorno virtual"""
        print("\nüì¶ CONFIGURANDO ENTORNO VIRTUAL...")
        
        venv_path = 'venv'
        
        if os.path.exists(venv_path):
            print("‚ÑπÔ∏è  Entorno virtual ya existe")
            return True
        
        try:
            # Crear entorno virtual
            subprocess.run([sys.executable, '-m', 'venv', venv_path], 
                         check=True, capture_output=True)
            print("‚úÖ Entorno virtual creado")
            return True
        except subprocess.CalledProcessError as e:
            self.errors.append(f"Error creando entorno virtual: {e}")
            return False

    def get_package_manager_commands(self):
        """Obtener comandos del gestor de paquetes seg√∫n SO"""
        if self.os_type == 'windows':
            return {
                'pip': 'venv\\Scripts\\pip.exe',
                'python': 'venv\\Scripts\\python.exe',
                'activate': 'venv\\Scripts\\activate.bat'
            }
        else:
            return {
                'pip': 'venv/bin/pip',
                'python': 'venv/bin/python',
                'activate': 'source venv/bin/activate'
            }

    def install_dependencies(self):
        """Instalar dependencias de Python"""
        print("\nüìö INSTALANDO DEPENDENCIAS...")
        
        commands = self.get_package_manager_commands()
        
        # Actualizar pip
        try:
            subprocess.run([commands['pip'], 'install', '--upgrade', 'pip'], 
                         check=True, capture_output=True)
            print("‚úÖ pip actualizado")
        except subprocess.CalledProcessError:
            self.warnings.append("No se pudo actualizar pip")
        
        # Instalar dependencias desde requirements.txt
        if os.path.exists('requirements.txt'):
            try:
                result = subprocess.run([commands['pip'], 'install', '-r', 'requirements.txt'], 
                                      check=True, capture_output=True, text=True)
                print("‚úÖ Dependencias instaladas desde requirements.txt")
                
                # Parsear paquetes instalados
                for line in result.stdout.split('\n'):
                    if 'Successfully installed' in line:
                        packages = line.replace('Successfully installed', '').strip().split()
                        self.installed_packages.extend(packages)
                
            except subprocess.CalledProcessError as e:
                self.errors.append(f"Error instalando dependencias: {e}")
                return False
        else:
            # Instalar dependencias manualmente
            required_packages = [
                'Flask==2.3.3',
                'Flask-SQLAlchemy==3.0.5',
                'Flask-CORS==4.0.0',
                'Flask-JWT-Extended==4.5.3',
                'Flask-Bcrypt==1.0.1',
                'python-dotenv==1.0.0',
                'openai==1.3.0',
                'Werkzeug==2.3.7',
                'SQLAlchemy==2.0.23'
            ]
            
            for package in required_packages:
                try:
                    subprocess.run([commands['pip'], 'install', package], 
                                 check=True, capture_output=True)
                    print(f"‚úÖ {package}")
                    self.installed_packages.append(package)
                except subprocess.CalledProcessError:
                    self.errors.append(f"Error instalando {package}")
        
        return len(self.errors) == 0

    def setup_directories(self):
        """Crear directorios necesarios"""
        print("\nüìÅ CONFIGURANDO DIRECTORIOS...")
        
        directories = ['uploads', 'respaldos', 'logs']
        
        for directory in directories:
            if not os.path.exists(directory):
                os.makedirs(directory)
                print(f"‚úÖ Directorio {directory} creado")
            else:
                print(f"‚ÑπÔ∏è  Directorio {directory} ya existe")

    def configure_environment(self):
        """Configurar archivo de entorno"""
        print("\n‚öôÔ∏è  CONFIGURANDO ENTORNO...")
        
        if os.path.exists('.env'):
            print("‚ÑπÔ∏è  Archivo .env ya existe")
            
            # Verificar configuraci√≥n existente
            with open('.env', 'r') as f:
                env_content = f.read()
            
            if 'tu_clave_openai_aqui' in env_content:
                self.warnings.append("OpenAI API Key no configurada en .env")
            
            return True
        
        # Generar configuraci√≥n autom√°tica
        local_ip = self.get_local_ip()
        
        env_template = f"""# Forest Edge PQR - Configuraci√≥n de Entorno
# Generado autom√°ticamente el {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# Claves de seguridad (CAMBIAR EN PRODUCCI√ìN)
SECRET_KEY=forest-edge-{datetime.now().strftime('%Y%m%d')}-secret-key-{hash(local_ip) % 10000}
JWT_SECRET_KEY=forest-edge-{datetime.now().strftime('%Y%m%d')}-jwt-key-{hash(local_ip + 'jwt') % 10000}

# OpenAI Configuration (Opcional)
OPENAI_API_KEY=tu_clave_openai_aqui

# Base de datos
DATABASE_URL=sqlite:///database.db

# Configuraci√≥n de desarrollo
FLASK_DEBUG=True
FLASK_ENV=development

# Configuraci√≥n de red
HOST=0.0.0.0
PORT=5000

# L√≠mites de archivos (16MB)
MAX_CONTENT_LENGTH=16777216

# Informaci√≥n del sistema
INSTALLATION_DATE={datetime.now().isoformat()}
SYSTEM_IP={local_ip}
PYTHON_VERSION={sys.version}
"""
        
        try:
            with open('.env', 'w') as f:
                f.write(env_template)
            print("‚úÖ Archivo .env configurado")
            print(f"üåê IP local detectada: {local_ip}")
            return True
        except Exception as e:
            self.errors.append(f"Error configurando .env: {e}")
            return False

    def test_installation(self):
        """Probar la instalaci√≥n"""
        print("\nüß™ PROBANDO INSTALACI√ìN...")
        
        commands = self.get_package_manager_commands()
        
        # Test 1: Importar m√≥dulos principales
        test_script = """
import sys
sys.path.insert(0, '.')

try:
    from app import app
    from models import User, PQR, db
    print("‚úÖ M√≥dulos principales importados correctamente")
except Exception as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    sys.exit(1)

try:
    with app.app_context():
        db.create_all()
        print("‚úÖ Base de datos inicializada")
except Exception as e:
    print(f"‚ùå Error con base de datos: {e}")
    sys.exit(1)

print("‚úÖ Pruebas b√°sicas completadas")
"""
        
        try:
            with open('test_installation.py', 'w') as f:
                f.write(test_script)
            
            result = subprocess.run([commands['python'], 'test_installation.py'], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("‚úÖ Pruebas de instalaci√≥n exitosas")
                os.remove('test_installation.py')
                return True
            else:
                print(f"‚ùå Error en pruebas: {result.stderr}")
                self.errors.append("Fall√≥ la prueba de instalaci√≥n")
                return False
                
        except subprocess.TimeoutExpired:
            self.errors.append("Timeout en pruebas de instalaci√≥n")
            return False
        except Exception as e:
            self.errors.append(f"Error ejecutando pruebas: {e}")
            return False

    def create_startup_scripts(self):
        """Crear scripts de inicio"""
        print("\nüìú CREANDO SCRIPTS DE INICIO...")
        
        commands = self.get_package_manager_commands()
        
        # Script para Windows
        if self.os_type == 'windows':
            bat_script = f"""@echo off
echo Iniciando Forest Edge PQR...
cd /d "{os.getcwd()}"
call {commands['activate']}
echo Servidor inici√°ndose en http://localhost:5000
echo Presiona Ctrl+C para detener
{commands['python']} run.py
pause
"""
            with open('iniciar_forest_edge.bat', 'w') as f:
                f.write(bat_script)
            print("‚úÖ Script de inicio Windows creado: iniciar_forest_edge.bat")
        
        # Script para Unix/Linux/macOS
        else:
            sh_script = f"""#!/bin/bash
echo "Iniciando Forest Edge PQR..."
cd "{os.getcwd()}"
{commands['activate']}
echo "Servidor inici√°ndose en http://localhost:5000"
echo "Presiona Ctrl+C para detener"
{commands['python']} run.py
"""
            with open('iniciar_forest_edge.sh', 'w') as f:
                f.write(sh_script)
            
            # Dar permisos de ejecuci√≥n
            os.chmod('iniciar_forest_edge.sh', 0o755)
            print("‚úÖ Script de inicio Unix creado: iniciar_forest_edge.sh")

    def create_service_files(self):
        """Crear archivos de servicio para producci√≥n"""
        print("\nüîß CREANDO ARCHIVOS DE SERVICIO...")
        
        # Archivo de servicio systemd para Linux
        if self.os_type == 'linux':
            service_content = f"""[Unit]
Description=Forest Edge PQR System
After=network.target

[Service]
Type=simple
User={os.getenv('USER', 'www-data')}
WorkingDirectory={os.getcwd()}
Environment=PATH={os.getcwd()}/venv/bin
ExecStart={os.getcwd()}/venv/bin/python run.py
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
"""
            
            service_dir = 'service_files'
            if not os.path.exists(service_dir):
                os.makedirs(service_dir)
            
            with open(f'{service_dir}/forest-edge-pqr.service', 'w') as f:
                f.write(service_content)
            
            print("‚úÖ Archivo de servicio systemd creado en service_files/")
            print("   Para instalar: sudo cp service_files/forest-edge-pqr.service /etc/systemd/system/")
            print("   Luego: sudo systemctl enable forest-edge-pqr")

    def generate_installation_report(self):
        """Generar reporte de instalaci√≥n"""
        print("\nüìã GENERANDO REPORTE DE INSTALACI√ìN...")
        
        report = {
            "installation_info": {
                "timestamp": datetime.now().isoformat(),
                "system": {
                    "os": platform.system(),
                    "release": platform.release(),
                    "machine": platform.machine(),
                    "python_version": f"{self.python_version.major}.{self.python_version.minor}.{self.python_version.micro}"
                },
                "network": {
                    "local_ip": self.get_local_ip(),
                    "internet_connection": self.check_internet_connection()
                }
            },
            "installation_results": {
                "success": len(self.errors) == 0,
                "errors": self.errors,
                "warnings": self.warnings,
                "installed_packages": self.installed_packages
            },
            "next_steps": {
                "manual_configuration": [
                    "Configurar OPENAI_API_KEY en .env si desea funcionalidad IA",
                    "Revisar configuraci√≥n de red si se requiere acceso remoto",
                    "Configurar respaldos autom√°ticos"
                ],
                "startup_commands": {
                    "windows": "iniciar_forest_edge.bat",
                    "unix": "./iniciar_forest_edge.sh",
                    "manual": f"{self.get_package_manager_commands()['python']} run.py"
                }
            }
        }
        
        with open('installation_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ Reporte guardado en: installation_report.json")
        return report

    def show_final_instructions(self):
        """Mostrar instrucciones finales"""
        local_ip = self.get_local_ip()
        commands = self.get_package_manager_commands()
        
        print("\n" + "="*60)
        print("üéâ INSTALACI√ìN COMPLETADA EXITOSAMENTE")
        print("="*60)
        
        if self.errors:
            print(f"‚ö†Ô∏è  Se encontraron {len(self.errors)} errores:")
            for error in self.errors:
                print(f"   ‚ùå {error}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è  Advertencias ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"   ‚ö†Ô∏è  {warning}")
        
        print(f"\nüöÄ INSTRUCCIONES DE INICIO:")
        print(f"="*30)
        
        if self.os_type == 'windows':
            print(f"üìù M√©todo 1 (Recomendado): Doble clic en 'iniciar_forest_edge.bat'")
        else:
            print(f"üìù M√©todo 1 (Recomendado): ./iniciar_forest_edge.sh")
        
        print(f"üìù M√©todo 2 (Manual):")
        print(f"   1. {commands['activate']}")
        print(f"   2. {commands['python']} run.py")
        
        print(f"\nüåê ACCESO AL SISTEMA:")
        print(f"="*25)
        print(f"üñ•Ô∏è  Local: http://localhost:5000")
        print(f"üåê Red local: http://{local_ip}:5000")
        
        print(f"\nüë• USUARIOS DE PRUEBA:")
        print(f"="*22)
        print(f"üìß Admin: admin@alimentos-enriko.com / admin123")
        print(f"üî¨ Calidad: calidad@alimentos-enriko.com / calidad123")
        print(f"üë§ Cliente: cliente@kfc.com / cliente123")
        print(f"üìù Registrador: registrador@alimentos-enriko.com / registrador123")
        
        print(f"\nüîß CONFIGURACI√ìN ADICIONAL:")
        print(f"="*30)
        print(f"‚Ä¢ Editar .env para configurar OpenAI API Key")
        print(f"‚Ä¢ Configurar firewall para acceso remoto si es necesario")
        print(f"‚Ä¢ Ejecutar respaldos regulares con: python sistema_respaldo.py")
        
        print(f"\nüìö ARCHIVOS √öTILES:")
        print(f"="*20)
        print(f"üìÑ installation_report.json - Reporte de instalaci√≥n")
        print(f"üîß verificador_sistema.py - Verificar estado del sistema")
        print(f"üíæ sistema_respaldo.py - Gesti√≥n de respaldos")
        print(f"üìñ Manual de usuario por roles disponible")
        
        print("="*60)

    def run_installation(self):
        """Ejecutar instalaci√≥n completa"""
        self.print_header()
        
        # Verificar requisitos
        if not self.check_requirements():
            print("\n‚ùå No se cumplen los requisitos m√≠nimos")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
            return False
        
        # Detectar entorno
        env_type = self.detect_environment()
        
        # Configurar entorno virtual
        if not self.setup_virtual_environment():
            print("\n‚ùå Error configurando entorno virtual")
            return False
        
        # Instalar dependencias
        if not self.install_dependencies():
            print("\n‚ùå Error instalando dependencias")
            return False
        
        # Configurar directorios
        self.setup_directories()
        
        # Configurar entorno
        if not self.configure_environment():
            print("\n‚ùå Error configurando entorno")
            return False
        
        # Probar instalaci√≥n
        if not self.test_installation():
            print("\n‚ùå Fall√≥ la prueba de instalaci√≥n")
            return False
        
        # Crear scripts de inicio
        self.create_startup_scripts()
        
        # Crear archivos de servicio
        self.create_service_files()
        
        # Generar reporte
        self.generate_installation_report()
        
        # Mostrar instrucciones finales
        self.show_final_instructions()
        
        return len(self.errors) == 0

def main():
    """Funci√≥n principal"""
    installer = AdvancedInstaller()
    
    print("üå≤ Forest Edge PQR - Instalador Avanzado")
    print("\n¬øDesea continuar con la instalaci√≥n autom√°tica?")
    confirm = input("Escriba 's√≠' para continuar: ").lower()
    
    if confirm not in ['s√≠', 'si', 'yes', 'y']:
        print("‚ùå Instalaci√≥n cancelada")
        return 1
    
    success = installer.run_installation()
    
    if success:
        print("\nüéâ ¬°Instalaci√≥n completada exitosamente!")
        
        # Preguntar si quiere iniciar el sistema ahora
        start_now = input("\n¬øDesea iniciar el sistema ahora? (s√≠/no): ").lower()
        if start_now in ['s√≠', 'si', 'yes', 'y']:
            print("\nüöÄ Iniciando sistema...")
            commands = installer.get_package_manager_commands()
            try:
                subprocess.run([commands['python'], 'run.py'])
            except KeyboardInterrupt:
                print("\nüõë Sistema detenido")
        
        return 0
    else:
        print("\n‚ùå La instalaci√≥n fall√≥")
        print("üìÑ Revisa installation_report.json para m√°s detalles")
        return 1

if __name__ == "__main__":
    sys.exit(main())